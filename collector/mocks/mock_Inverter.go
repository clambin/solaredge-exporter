// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	solaredge "github.com/clambin/solaredge"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Inverter is an autogenerated mock type for the Inverter type
type Inverter struct {
	mock.Mock
}

type Inverter_Expecter struct {
	mock *mock.Mock
}

func (_m *Inverter) EXPECT() *Inverter_Expecter {
	return &Inverter_Expecter{mock: &_m.Mock}
}

// GetTelemetry provides a mock function with given fields: ctx, start, end
func (_m *Inverter) GetTelemetry(ctx context.Context, start time.Time, end time.Time) ([]solaredge.InverterTelemetry, error) {
	ret := _m.Called(ctx, start, end)

	var r0 []solaredge.InverterTelemetry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]solaredge.InverterTelemetry, error)); ok {
		return rf(ctx, start, end)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []solaredge.InverterTelemetry); ok {
		r0 = rf(ctx, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]solaredge.InverterTelemetry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inverter_GetTelemetry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTelemetry'
type Inverter_GetTelemetry_Call struct {
	*mock.Call
}

// GetTelemetry is a helper method to define mock.On call
//   - ctx context.Context
//   - start time.Time
//   - end time.Time
func (_e *Inverter_Expecter) GetTelemetry(ctx interface{}, start interface{}, end interface{}) *Inverter_GetTelemetry_Call {
	return &Inverter_GetTelemetry_Call{Call: _e.mock.On("GetTelemetry", ctx, start, end)}
}

func (_c *Inverter_GetTelemetry_Call) Run(run func(ctx context.Context, start time.Time, end time.Time)) *Inverter_GetTelemetry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(time.Time))
	})
	return _c
}

func (_c *Inverter_GetTelemetry_Call) Return(_a0 []solaredge.InverterTelemetry, _a1 error) *Inverter_GetTelemetry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Inverter_GetTelemetry_Call) RunAndReturn(run func(context.Context, time.Time, time.Time) ([]solaredge.InverterTelemetry, error)) *Inverter_GetTelemetry_Call {
	_c.Call.Return(run)
	return _c
}

// NewInverter creates a new instance of Inverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Inverter {
	mock := &Inverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
